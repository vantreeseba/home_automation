substitutions:
  name: "vantreeseba-multisensor"
  friendly_name: "Smart Speaker / Multisensor"
  temperature_offset: "-3"
  # PINS
  rmt_rgb_pin: GPIO04
  
  i2s_out_lrclk_pin: GPIO25
  i2s_out_bclk_pin: GPIO27
  i2s_dout_pin: GPIO2

  i2s_in_lrclk_pin: GPIO33
  i2s_in_bclk_pin: GPIO32
  i2s_din_pin: GPIO34

  uart_tx_pin: GPIO25
  uart_rx_pin: GPIO27
  
  i2c_sda_pin: GPIO22
  i2c_scl_pin: GPIO21 
  i2c_freq: 400khz

esphome:
  name: ${name}
  project:
    name: "vantreeseba.multisensor"
    version: "3.0.0"
  friendly_name: ${friendly_name}

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_COMPILER_OPTIMIZATION_PERF: y

external_components:
  # - source: github://pr#5674
  #   components: [ld2450]
  - source: github://pr#5230
    components:
      - esp_adf
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: main
    components: [ adf_pipeline, i2s_audio ]
    refresh: 0s
    # - source:
    #     type: git
    #     url: https://github.com/gnumpi/esphome_audio
    #     ref: main
    #     components: [ adf_pipeline, i2s_audio ]

logger:
ota:

wifi:
  use_address: vantreeseba-multisensor
  ssid: !secret wifi_ssid
  password: !secret wifi_password


time:
  id: ntp_time
  platform: sntp
  timezone: America/Chicago

## BUSSES
i2c:
  sda: ${i2c_sda_pin}
  scl: ${i2c_scl_pin}
  scan: true
  frequency: ${i2c_freq}

i2s_audio:
  - id: i2s_in
    i2s_lrclk_pin: ${i2s_in_lrclk_pin}
    i2s_bclk_pin: ${i2s_in_bclk_pin}
  - id: i2s_out
    i2s_lrclk_pin: ${i2s_out_lrclk_pin}
    i2s_bclk_pin: ${i2s_out_bclk_pin}

# uart:
#   id: uart_ld2450
#   tx_pin: ${uart_tx_pin}
#   rx_pin: ${uart_rx_pin}
#   baud_rate: 256000
#   parity: NONE
#   stop_bits: 1

#### AUDIO SETTINGS
esp_adf:

# expose the i2s components as pipeline elements
adf_pipeline:
    # create an I2SWriter pipeline element
    # using the i2s_out configuration
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_out
    i2s_dout_pin: ${i2s_dout_pin}
    # create an I2SReader pipeline element
    # using the i2s_in configuration
  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    i2s_audio_id: i2s_in
    i2s_din_pin: ${i2s_din_pin}
    channel: left
    sample_rate: 16000
    bits_per_sample: 16bit
    pdm: false

# LOOK AT: https://github.com/gnumpi/esphome_audio
microphone:
  - platform: adf_pipeline
    id: adf_microphone
    pipeline:
      - adf_i2s_in
      - self
  # - platform: i2s_audio
  #   id: hav_mic
  #   adc_type: external
  #   i2s_din_pin: ${i2s_din_pin}
  #   pdm: false

# speaker:
#   - platform: i2s_audio
#     id: hav_speaker
#     dac_type: external
#     i2s_dout_pin: GPIO18
#     mode: mono

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    internal: false
    pipeline:
      - self
      - adf_i2s_out
  # - platform: i2s_audio
  #   id: hav_speaker
  #   name: test_speaker
  #   dac_type: external
  #   i2s_dout_pin: GPIO18
  #   mode: mono

# Example button configuration
button:
  - platform: template
    name: Start Voice Assistant
    id: start_voice_assistant

    # Optional variables:
    icon: "mdi:emoticon-outline"
    on_press:
      - if:
          condition: voice_assistant.is_running
          then:
            - voice_assistant.stop:
          else:
            - voice_assistant.start:

### ASSISTANT
api:
  on_client_connected:
    then:
      - delay: 50ms
      - micro_wake_word.start:
  on_client_disconnected:
        then:
          - voice_assistant.stop:

# Shorthand name
micro_wake_word:
  model: okay_nabu
  on_wake_word_detected:
    - voice_assistant.start:

voice_assistant:
  id: hav
  microphone: adf_microphone
  media_player: adf_media_player
  # speaker: hav_speaker
  # media_player: hav_speaker
  # use_wake_word: true
  # noise_suppression_level: 2
  # volume_multiplier: 1.5
  # auto_gain: 20dBFS
  vad_threshold: 2
  on_error:
    - micro_wake_word.start:  
  on_end:
    - micro_wake_word.start:

  # on_client_connected:
    # - voice_assistant.start_continuous:
    # - if:
        # condition:
          # switch.is_on: use_wake_word
        # then:
          # - voice_assistant.start_continuous:
  # on_client_disconnected:
    # - voice_assistant.stop:
    # - if:
        # condition:
          # switch.is_on: use_wake_word
        # then:
          # - voice_assistant.stop:
  # on_listening:
  #   - light.turn_on:
  #       id: status_leds
  #       blue: 20%
  #       red: 0%
  #       green: 0%
  #       effect: pulse
  # on_tts_start:
  #   - if:
  #       condition:
  #         lambda: 'return x.find("Sorry") != std::string::npos;'
  #       then:
  #         - light.turn_on:
  #             id: status_leds
  #             blue: 0%
  #             red: 20%
  #             green: 0%
  #             effect: pulse
  #       else:
  #         - light.turn_on:
  #             id: status_leds
  #             blue: 0%
  #             red: 0%
  #             green: 20%
  #             effect: pulse
  # on_end:
  #   - delay: 3s
  #   - light.turn_off:
  #       id: status_leds
  # on_error:
  #   - light.turn_on:
  #       id: status_leds
  #       blue: 0%
  #       red: 20%
  #       green: 0%
  #       effect: pulse
  #   - delay: 3s
  #   - light.turn_off: status_leds

#### RBG LED STRIP
light:
  - platform: esp32_rmt_led_strip
    id: status_leds
    rgb_order: GRB
    pin: ${rmt_rgb_pin}
    num_leds: 5
    rmt_channel: 0
    disabled_by_default: true
    name: "Status Leds"
    chipset: ws2812
    effects:
      - pulse:
          transition_length: 250ms
          update_interval: 500ms
          min_brightness: 20%
          max_brightness: 50%

#### OLED DISPLAY
font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto_16
    size: 16
  - file: "gfonts://Roboto"
    id: roboto_32
    size: 32

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      auto cur_time = id(ntp_time).now();
      it.strftime(0, 0, id(roboto_32), "%X", cur_time);
      auto temperature = ((id(aht10_temp).state / 5) * 9) + 32;
      auto humidity = id(aht10_humidity).state;
      it.printf(0, 48, id(roboto_16), "%4.1fÂ°F %12.1f%%", temperature, id(aht10_humidity).state);

# LD2450 Config
# ld2450:
#   id: ld2450_radar
#   uart_id: uart_ld2450
#   throttle: 1000ms

# binary_sensor:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     has_target:
#       name: Presence
#     has_moving_target:
#       name: Moving Target
#     has_still_target:
#       name: Still Target

# number:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     presence_timeout:
#       name: "Timeout"

# select:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     baud_rate:
      # name: "Baud rate"

sensor:
  - platform: aht10
    temperature:
      id: aht10_temp
      name: "${friendly_name} Temperature"
      filters:
      - offset: ${temperature_offset}
    humidity:
      id: aht10_humidity
      name: "${friendly_name} Humidity"
    update_interval: 30s
  - platform: bh1750
    name: "${friendly_name} Illuminance"
    address: 0x23
    update_interval: 5s
  # - platform: ld2450
  #   ld2450_id: ld2450_radar
  #   target_count:
  #     name: Presence Target Count
  #   still_target_count:
  #     name: Still Target Count
  #   moving_target_count:
  #     name: Moving Target Count
  #   target_1:
  #     x:
  #       name: Target-1 X
  #     y:
  #       name: Target-1 Y
  #     speed:
  #       name: Target-1 Speed
  #       internal: true 
  #     angle:
  #       name: Target-1 Angle
  #       internal: true 
  #     distance:
  #       name: Target-1 Distance
  #       internal: true 
  #     resolution:
  #       name: Target-1 Resolution
  #       internal: true 
  #   target_2:
  #     x:
  #       name: Target-2 X
  #     y:
  #       name: Target-2 Y
  #     speed:
  #       name: Target-2 Speed
  #       internal: true 
  #     angle:
  #       name: Target-2 Angle
  #       internal: true 
  #     distance:
  #       name: Target-2 Distance
  #       internal: true 
  #     resolution:
  #       name: Target-2 Resolution
  #       internal: true 
  #   target_3:
  #     x:
  #       name: Target-3 X
  #     y:
  #       name: Target-3 Y
  #     speed:
  #       name: Target-3 Speed
  #       internal: true 
  #     angle:
  #       name: Target-3 Angle
  #       internal: true 
  #     distance:
  #       name: Target-3 Distance
  #       internal: true 
  #     resolution:
  #       name: Target-3 Resolution
  #       internal: true

### OTHER
# switch:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     multi_target:
#       name: "Multi Target Tracking"
#   - platform: template
#     name: Use wake word
#     id: use_wake_word
#     optimistic: true
#     restore_mode: RESTORE_DEFAULT_ON
#     entity_category: config
#     on_turn_on:
#       - lambda: id(hav).set_use_wake_word(true);
#       - if:
#           condition:
#             not:
#               - voice_assistant.is_running
#           then:
#             - voice_assistant.start_continuous
#     on_turn_off:
#       - voice_assistant.stop
#       - lambda: id(hav).set_use_wake_word(false);
